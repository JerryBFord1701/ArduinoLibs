/*
        TITLE: Digital PortX on a MCU that has 8bit Register Addressing and the ports are 8bits wide.
      VERSION: 1.2022.0121
       AUTHOR: Jerome B. Ford
  DESCRIPTION: Object to directly control ports registers on a uC. Developed on an Arduino UNO
   REFERENCES:
              1) https://www.avrfreaks.net/forum/pass-ports-and-their-registers-functions
              2) https://www.avrfreaks.net/forum/passing-port-argument
*/
#ifndef DigitalPin_h
#define DigitalPin_h

#include "Arduino.h"

class DigitalPin
{
  
  private:
    volatile uint8_t *_thePORTx;
    volatile uint8_t *_theDDRx;
    volatile uint8_t *_thePINx;
  
  public:
    //  0)------------------------------------------------------------------------------------//
    DigitalPin();
    //  1)------------------------------------------------------------------------------------//
    DigitalPin(volatile uint8_t *PORTx);
    //  2)------------------------------------------------------------------------------------//
    DigitalPin(volatile uint8_t *PORTx, volatile uint8_t *DDRx);
    //  3)------------------------------------------------------------------------------------//
    DigitalPin(volatile uint8_t *PORTx, volatile uint8_t *DDRx, volatile uint8_t *PINx);
    //  4)------------------------------------------------------------------------------------//
    ~DigitalPin();
    //  5)------------------------------------------------------------------------------------//
    void SetBit0(uint8_t theState);
    //  6)------------------------------------------------------------------------------------//
    void SetBit1(uint8_t theState);
    //  7)------------------------------------------------------------------------------------//
    void SetBit2(uint8_t theState);
    //  8)------------------------------------------------------------------------------------//
    void SetBit3(uint8_t theState);
    //  9)------------------------------------------------------------------------------------//
    void SetBit4(uint8_t theState);
    // 10)------------------------------------------------------------------------------------//
    void SetBit5(uint8_t theState);
    // 11)------------------------------------------------------------------------------------//
    void SetBit6(uint8_t theState);
    // 12)------------------------------------------------------------------------------------//
    void SetBit7(uint8_t theState);
    // 13)------------------------------------------------------------------------------------//
    void SetBit(uint8_t theBit, uint8_t theState);
    // 14)------------------------------------------------------------------------------------//
    uint8_t GetBit0();
    // 15)------------------------------------------------------------------------------------//
    uint8_t GetBit1();
    // 16)------------------------------------------------------------------------------------//
    uint8_t GetBit2();
    // 17)------------------------------------------------------------------------------------//
    uint8_t GetBit3();
    // 18)------------------------------------------------------------------------------------//
    uint8_t GetBit4();
    // 19)------------------------------------------------------------------------------------//
    uint8_t GetBit5();
    // 20)------------------------------------------------------------------------------------//
    uint8_t GetBit6();
    // 21)------------------------------------------------------------------------------------//
    uint8_t GetBit7();
    // 22)------------------------------------------------------------------------------------//
    uint8_t GetBit(uint8_t theBit);
    // 23)------------------------------------------------------------------------------------//
    void SetPort(uint8_t OutputBits);
    // 24)------------------------------------------------------------------------------------//
    uint8_t GetPort();
    // 25)------------------------------------------------------------------------------------//
    void SetDirection(uint8_t DirectionBits);
    // 26)------------------------------------------------------------------------------------//
    uint8_t GetDirection();
    // 27)------------------------------------------------------------------------------------//
    void SetPortRef(volatile uint8_t *PORTx, volatile uint8_t *DDRx, volatile uint8_t *PINx);
    // 28)------------------------------------------------------------------------------------//
    void SetConfiguration(uint8_t DirectionBits, uint8_t BitStates, uint8_t PullUpBits);
    //----------------------------------------------------------------------------------------//
};
#endif
